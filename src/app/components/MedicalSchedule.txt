"use client";
import {
  getMedicalSchedule,
  formatDate,
  MedicalAppointment,
} from "@/app/funcs/ProfileFunc";
import { redirect } from "next/navigation";
import React, { useEffect, useState } from "react";

export default function MedicalSchedule() {
  const [appointments, setAppointments] = useState<MedicalAppointment[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchSchedule = async () => {
      setLoading(true);
      try {
        // Safe parse for auth
        let auth: any;
        try {
          auth = JSON.parse(localStorage.getItem("auth") || "{}");
        } catch {
          console.error("Invalid auth object in localStorage");
        }
        if (!(auth && auth.role === "medical" && auth.code)) {
          console.error("No valid medical profile found in localStorage");
          return;
        }
        // Fetch medical schedule using the new function
        const medicalAppointments = await getMedicalSchedule(auth);
        setAppointments(medicalAppointments || []);
      } catch (error) {
        console.error("Error fetching medical schedule:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchSchedule();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="text-gray-600">Loading schedule...</div>
      </div>
    );
  }

  if (!appointments || appointments.length === 0) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="text-gray-600">No appointments found in schedule.</div>
      </div>
    );
  }

  // appointments are computed in the effect above
  const getStatusColor = (schedule: string) => {
    const now = new Date();
    const appointmentDate = new Date(schedule);

    if (appointmentDate < now) {
      return "text-gray-600 bg-gray-100"; // Past
    } else if (
      appointmentDate.getTime() - now.getTime() <
      24 * 60 * 60 * 1000
    ) {
      return "text-yellow-600 bg-yellow-100"; // Today/Tomorrow
    } else {
      return "text-green-600 bg-green-100"; // Future
    }
  };

  const getStatusText = (schedule: string) => {
    const now = new Date();
    const appointmentDate = new Date(schedule);

    if (appointmentDate < now) {
      return "Completed";
    } else if (
      appointmentDate.getTime() - now.getTime() <
      24 * 60 * 60 * 1000
    ) {
      return "Upcoming";
    } else {
      return "Scheduled";
    }
  };

  return (
    <div>
      <header className="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 mb-2 items-center">
              My Appointments
            </h1>
            <p className="text-gray-600">
              Stay on top of your patient schedule.
            </p>
            <p className="text-gray-600">
              Total Appointments: {appointments.length}
            </p>
          </div>
        </div>
      </header>

      <div className="space-y-4">
        {appointments.map((appointment) => (
          <div
            key={appointment.id}
            className="flex items-center justify-between p-6 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
          >
            <div className="flex items-center space-x-4 flex-1">
              <div className="text-center min-w-[80px]">
                <p className="text-sm font-medium text-gray-900">
                  {formatDate(appointment.schedule)}
                </p>
              </div>
              <div className="w-px h-16 bg-gray-200"></div>
              <div className="flex-1">
                <h4 className="text-lg font-semibold text-gray-900 mb-1">
                  {appointment.patientName}
                </h4>
                <div className="grid grid-cols-2 gap-4 text-sm text-gray-600">
                  <div>
                    <p>
                      <span className="font-medium">Phone:</span>{" "}
                      {appointment.patientPhone}
                    </p>
                    <p>
                      <span className="font-medium">Age:</span>{" "}
                      {appointment.patientAge}
                    </p>
                    <p>
                      <span className="font-medium">Country:</span>{" "}
                      {appointment.patientCountry}
                    </p>
                  </div>
                  <div>
                    <p>
                      <span className="font-medium">Gender:</span>{" "}
                      {appointment.patientGender}
                    </p>
                    <p>
                      <span className="font-medium">Profession:</span>{" "}
                      {appointment.patientProfession}
                    </p>
                  </div>
                </div>
                <div className="mt-3">
                  <p className="text-sm">
                    <span className="font-medium text-blue-600">
                      Diagnosis:
                    </span>{" "}
                    {appointment.diagnosis}
                  </p>
                  <p className="text-sm">
                    <span className="font-medium text-green-600">
                      Treatment:
                    </span>{" "}
                    {appointment.medicalTreatment}
                  </p>
                  <p className="text-sm">
                    <span className="font-medium text-orange-600">
                      Complaint:
                    </span>{" "}
                    {appointment.complaint}
                  </p>
                </div>
              </div>
            </div>

            <div className="flex flex-col items-end space-y-3 ml-4">
              <span
                className={`px-3 py-1 rounded-full text-xs font-medium ${getStatusColor(
                  appointment.schedule
                )}`}
              >
                {getStatusText(appointment.schedule)}
              </span>
              <div className="flex space-x-2">
                <button
                  className="text-blue-600 hover:text-blue-800 text-sm cursor-pointer font-medium"
                  onClick={(e) =>
                    redirect(`/patients/${appointment.patientPhone}`)
                  }
                >
                  View Details
                </button>
                {/* <button className="text-red-600 hover:text-red-800 text-sm font-medium">
                  Reschedule
                </button> */}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
